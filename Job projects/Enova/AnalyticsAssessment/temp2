training_df = training_df.drop('id', axis = 1)

measures = []
length = []
width = []
depth = []

for values in training_df['Measurements']:
    measures.append(re.split('([\d.]+)\D([\d.]+)\D([\d.]+)', values))

for values in measures:
    del values[0]
    del values[-1]
    length.append(values[0])
    width.append(values[1])
    depth.append(values[2])

print(len(length))
print(len(width))
print(len(depth))

training_df['length'] = length
training_df['width'] = width
training_df['depth'] = depth

training_df['length'] = training_df['length'].astype(float)
training_df['width'] = training_df['width'].astype(float)
training_df['depth'] = training_df['depth'].astype(float)

print(training_df['length'].dtype)
print(training_df['width'].dtype)
print(training_df['depth'].dtype)

training_df[['Depth_perc']] = training_df[['Depth_perc']].replace(0,np.NaN)

training_df.drop(['Table', 'Depth_perc', 'Known_Conflict_Diamond', 'Cert', 'Fluroescence', 'Measurements'], axis=1, inplace=True)

training_df.drop(['Cut', 'Polish', 'Symmetry', 'Price', 'Vendor'], axis=1, inplace=True)

training_df.columns

training_cat = training_df.select_dtypes(include=['object'])
training_cat.columns

training_num = training_df.select_dtypes(include=np.number)
training_num.columns

one_hot_encoders_training_df =  pd.get_dummies(training_df)
one_hot_encoders_training_df.head()

# a structured approach
cols = one_hot_encoders_training_df.columns
diamond_clean_data = pd.DataFrame(one_hot_encoders_training_df,columns= cols)
diamond_clean_data.head()

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
numericals =  pd.DataFrame(sc_X.fit_transform(diamond_clean_data[['Carats', 'length', 'width', 'depth']]),
                           columns=['Carats', 'length', 'width', 'depth'],index=diamond_clean_data.index)
numericals.head()

diamond_clean_data_standard = diamond_clean_data.copy(deep=True)
diamond_clean_data_standard[['Carats', 'length', 'width', 'depth']] = numericals[['Carats', 'length', 'width', 'depth']]
diamond_clean_data_standard.head()

x = diamond_clean_data_standard.drop(["LogPrice"],axis=1)
y = diamond_clean_data_standard.LogPrice

from sklearn.model_selection import train_test_split
train_x, test_x, train_y, test_y = train_test_split(x, y,random_state = 2,test_size=0.3

from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn import linear_model

regr = linear_model.LinearRegression()
regr.fit(train_x,train_y)
y_pred = regr.predict(test_x)
print("accuracy: "+ str(regr.score(test_x,test_y)*100) + "%")
print("Mean absolute error: {}".format(mean_absolute_error(test_y,y_pred)))
print("Mean squared error: {}".format(mean_squared_error(test_y,y_pred)))
R2 = r2_score(test_y,y_pred)
print('R Squared: {}'.format(R2))
n=test_x.shape[0]
p=test_x.shape[1] - 1

adj_rsquared = 1 - (1 - R2) * ((n - 1)/(n-p-1))
print('Adjusted R Squared: {}'.format(adj_rsquared))


las_reg = linear_model.Lasso()
las_reg.fit(train_x,train_y)
y_pred = las_reg.predict(test_x)
print("accuracy: "+ str(las_reg.score(test_x,test_y)*100) + "%")
print("Mean absolute error: {}".format(mean_absolute_error(test_y,y_pred)))
print("Mean squared error: {}".format(mean_squared_error(test_y,y_pred)))
R2 = r2_score(test_y,y_pred)
print('R Squared: {}'.format(R2))
n=test_x.shape[0]
p=test_x.shape[1] - 1

adj_rsquared = 1 - (1 - R2) * ((n - 1)/(n-p-1))
print('Adjusted R Squared: {}'.format(adj_rsquared))

rig_reg = linear_model.Ridge()
rig_reg.fit(train_x,train_y)
y_pred = rig_reg.predict(test_x)
print("accuracy: "+ str(rig_reg.score(test_x,test_y)*100) + "%")
print("Mean absolute error: {}".format(mean_absolute_error(test_y,y_pred)))
print("Mean squared error: {}".format(mean_squared_error(test_y,y_pred)))
R2 = r2_score(test_y,y_pred)
print('R Squared: {}'.format(R2))
n=test_x.shape[0]
p=test_x.shape[1] - 1

adj_rsquared = 1 - (1 - R2) * ((n - 1)/(n-p-1))
print('Adjusted R Squared: {}'.format(adj_rsquared))