} else {
## (re)fit the model
model_df <- gamlss(formula = OILPRICE ~ ., family = BCPE, data = train_df,
control = gamlss.control(n.cyc = 350))
}
# save the model
save(model_df, file = "gamlss_oil_model.rda")
summary(model_df)
# Prediction
test_df$pred <- predict(model_df, newdata=test_df, type = "response")
# Deviation calculation
test_df$pred.deviation  <- round(test_df$pred/test_df$OILPRICE,10)
test_df$pred.deviation  <- test_df$pred.deviation-1
# Plotting prediction's deviation
par(mfrow=c(1,2))
hist(100*test_df$pred.deviation, main="Prediction +-2% deviation interval",
xlab = "Deviation percentage", labels = T,
xlim =c(-2,2),
ylim = c(0,150))
hist(100*test_df$pred.deviation, main="Prediction +-.5% deviation interval",
xlab = "Deviation percentage", labels = T,
xlim =c(-0.5,0.5),
ylim = c(0,150), breaks = 32)
test_dev <- 100*test_df$pred.deviation
test_1dev <- sum(abs(test_dev) <= 1)
test_05dev <- sum(abs(test_dev) <= 0.5)
test_size <- nrow(test_df)
test_in_1dev = (test_1dev / test_size)*100
test_in_05dev = (test_05dev / test_size)*100
paste0(round(test_in_1dev,2),
'% of the predicted values are in a +-1% deviation margin to the real values')
paste0(round(test_in_05dev,2),
'% of the predicted values are in a +-0.5% deviation margin to the real values')
plot(model_df)
# Plotting residuals
wp(model_df)
# Getting each model's non parametric test
GD = c(model_df$G.deviance) #Deviation
AIC = c(model_df$aic)# Overfitting
SBC = c(model_df$sbc)# Overfitting
paste0('The model Global Deviation - GD was: ', round(GD,2))
paste0('The model Akaike Information Criterion - AIC was: ', round(AIC,2))
paste0('The model Schwarz Bayesian Criterion - SBC was: ', round(SBC,2))
write.csv(test_df,"daily_oil_prediction.csv", row.names = FALSE)
# Verify if the package is already installed, if not, install package
if("ggplot2" %in% rownames(installed.packages()) == FALSE) {install.packages("ggplot2")}
if("ggpubr" %in% rownames(installed.packages()) == FALSE) {install.packages("ggpubr")}
if("tidyverse" %in% rownames(installed.packages()) == FALSE) {install.packages("tidyverse")}
if("tidyr" %in% rownames(installed.packages()) == FALSE) {install.packages("tidyr")}
if("gridExtra" %in% rownames(installed.packages()) == FALSE) {install.packages("gridExtra")}
if("gamlss" %in% rownames(installed.packages()) == FALSE) {install.packages("gamlss")}
if("gamlss.add" %in% rownames(installed.packages()) == FALSE) {install.packages("gamlss.add")}
if("gamlss.dist" %in% rownames(installed.packages()) == FALSE) {install.packages("gamlss.dist")}
if("corrplot" %in% rownames(installed.packages()) == FALSE) {install.packages("corrplot")}
if("gamlss.dist" %in% rownames(installed.packages()) == FALSE) {install.packages("gamlss.dist")}
if("Hmisc" %in% rownames(installed.packages()) == FALSE) {install.packages("Hmisc")}
if("forecast" %in% rownames(installed.packages()) == FALSE) {install.packages("forecast")}
# Loading libraries
library(gamlss)
library(ggpubr)
library(gamlss.add)
library(gamlss.dist)
library(ggplot2)
library(corrplot)
library(cowplot)
library(Hmisc)
library(gridExtra)
library(forecast)
# extrack the 'oil' data
data(oil)
# set random seed to create a reproducible script
set.seed(18)
head(as.matrix(oil), 3)
paste0("The \'oil\' data frame has ", nrow(oil), " observations and  ",
ncol(oil), " variables. ")
# columns names (oil)
oil_col_names <- colnames(oil)
cat('Variables in the \'oil\' data frame: \n\n')
for (i in (1:ncol(oil))) {print(paste0("Column number: ",i, ". Variable name: ",
oil_col_names[i]))}
is.null(oil)
sum(is.na(oil))
# Creating a new data frame called 'df' without the past contracts information.
# According to the number of columns and their names in 'oil_col_names', lets
# remove the columns 2 to 15 representing the 'CL#_log's variables
df = oil[,-2:-15]
head(df, 3)
ts(df$OILPRICE, frequency = 365) %>%
decompose() %>%
autoplot()
paste0("The 'df' data frame has ", nrow(df), " observations and  ", ncol(df),
" variables. ")
# columns names (df)
df_col_names <- colnames(df)
cat('Variables in the \'df\' data frame: \n\n')
for (i in (1:ncol(df))) {print(paste0("Column number: ",i, ". Variable name: ",
df_col_names[i]))}
# paste0("Variable name: ", col_names)
# Let us see some basic statistics of our new 'df' data frame
summary(df)
p1 <- ggplot(df, aes(SPX_log, OILPRICE)) + geom_point()
p2 <- ggplot(df, aes(DX1_log, OILPRICE)) +  geom_point()
p3 <- ggplot(df, aes(BDIY_log, OILPRICE)) +  geom_point()
p4 <- ggplot(df, aes(GC1_log, OILPRICE)) +  geom_point()
p5 <- ggplot(df, aes(HO1_log, OILPRICE)) +  geom_point()
p6 <- ggplot(df, aes(FTSE_log, OILPRICE)) +  geom_point()
p7 <- ggplot(df, aes(USCI_log, OILPRICE)) +  geom_point()
p8 <- ggplot(df, aes(GNR_log, OILPRICE)) +  geom_point()
p9 <- ggplot(df, aes(SHCOMP_log, OILPRICE)) +  geom_point()
plot_list = list(p1, p2, p3, p4, p5, p6, p7, p8, p9)
plot_grid(plotlist = plot_list,
labels = c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'),
label_x = 0.01,
label_y = 0.87,
hjust = -0.5,
vjust = -0.5,
label_fontfamily = "serif",
label_fontface = "plain",
label_colour = "blue")
# Making the objects in the 'df' data frame searchable
attach(df)
# Selecting plot's parameters
color1 <- 'black'
fill1 <- 'white'
alp <- .2
fill2 <- "#FF6666"
x_inter = mean(OILPRICE)
color2 <- 'blue'
lt <- 'dashed'
sz <- 1
# Plotting
par(mfrow=c(3,4))
h1 <- ggplot(df, aes(x=OILPRICE))+ ggtitle("Oil Price")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(OILPRICE)), color=color2, linetype=lt, size=sz)
h2 <- ggplot(df, aes(x=BDIY_log))+ ggtitle("Baltic Dry")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(BDIY_log)), color=color2, linetype=lt, size=sz)
h3 <- ggplot(df, aes(x=SPX_log))+ ggtitle("S&P 500 index")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(SPX_log)), color=color2, linetype=lt, size=sz)
h4 <- ggplot(df, aes(x=DX1_log))+ ggtitle("US Dollar Index")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(DX1_log)), color=color2, linetype=lt, size=sz)
h5 <- ggplot(df, aes(x=GC1_log))+ ggtitle("Gold price contract trades")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(GC1_log)), color=color2, linetype=lt, size=sz)
h6 <- ggplot(df, aes(x=HO1_log))+ ggtitle("Heating Oil price contract traded")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(HO1_log)), color=color2, linetype=lt, size=sz)
h7 <- ggplot(df, aes(x=USCI_log))+ ggtitle("US Commodity Index")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(USCI_log)), color=color2, linetype=lt, size=sz)
h8 <- ggplot(df, aes(x=GNR_log))+ ggtitle("S&P Global Natural Resources Index")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(GNR_log)), color=color2, linetype=lt, size=sz)
h9 <- ggplot(df, aes(x=SHCOMP_log))+
ggtitle("Shanghai Stock Exchange Composite Index")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(SHCOMP_log)), color=color2, linetype=lt,
size=sz)
h10 <- ggplot(df, aes(x=FTSE_log))+ ggtitle("FTSE 100 Index")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(FTSE_log)), color=color2, linetype=lt, size=sz)
h11 <- ggplot(df, aes(x=respLAG))+ ggtitle("OILPRICE - lagged version")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(respLAG)), color=color2, linetype=lt, size=sz)
hist_list = list(h1, h2, h3, h4, h5, h6, h7, h8, h9, h10, h11)
plot_grid(plotlist = hist_list,
labels = c('A', 'B', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M'),
label_x = 0.01,
label_y = 0.87,
hjust = -0.5,
vjust = -0.5,
label_fontfamily = "serif",
label_fontface = "plain",
label_colour = "blue")
# Building a correlation Matrix
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# matrix of the p-value of the correlation
p.mat <- cor.mtest(df, method = 'spearman', exact=FALSE)
p.mat
corr_mat=cor(df,method="s")
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(corr_mat, method="color", col=col(200),
type="upper", order="hclust",
addCoef.col = "black",
tl.col="black", tl.srt=45,
# Combine with significance
p.mat = p.mat, sig.level = 0.001, insig = "pch",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
# showing available link functions for BCPE distribution parameters
show.link('BCPE')
histDist(df$OILPRICE,
family = BCPE,
density = TRUE,
main = 'The Oil Price and the fitted BCPE distribution',
ylab = 'Frequency',
xlab = 'Oil Price')
# Dividing the 'df' data frame into train and test
dt_df = sample(nrow(df), nrow(df)*.7, replace = FALSE)
train_df <- df[dt_df, ]
test_df <- df[-dt_df, ]
print('Data splitted: 70% train, 30% test')
## check if model exists? If not, refit:
if(file.exists("gamlss_oil_model.rda")) {
## load model
load("gamlss_oil_model.rda")
} else {
## (re)fit the model
model_df <- gamlss(formula = OILPRICE ~ ., family = BCPE, data = train_df,
control = gamlss.control(n.cyc = 350))
}
# save the model
save(model_df, file = "gamlss_oil_model.rda")
summary(model_df)
# Prediction
test_df$pred <- predict(model_df, newdata=test_df, type = "response")
# Deviation calculation
test_df$pred.deviation  <- round(test_df$pred/test_df$OILPRICE,10)
test_df$pred.deviation  <- test_df$pred.deviation-1
# Plotting prediction's deviation
par(mfrow=c(1,2))
hist(100*test_df$pred.deviation, main="Prediction +-2% deviation interval",
xlab = "Deviation percentage", labels = T,
xlim =c(-2,2),
ylim = c(0,150))
hist(100*test_df$pred.deviation, main="Prediction +-.5% deviation interval",
xlab = "Deviation percentage", labels = T,
xlim =c(-0.5,0.5),
ylim = c(0,150), breaks = 32)
test_dev <- 100*test_df$pred.deviation
test_1dev <- sum(abs(test_dev) <= 1)
test_05dev <- sum(abs(test_dev) <= 0.5)
test_size <- nrow(test_df)
test_in_1dev = (test_1dev / test_size)*100
test_in_05dev = (test_05dev / test_size)*100
paste0(round(test_in_1dev,2),
'% of the predicted values are in a +-1% deviation margin to the real values')
paste0(round(test_in_05dev,2),
'% of the predicted values are in a +-0.5% deviation margin to the real values')
plot(model_df)
# Plotting residuals
wp(model_df)
# Getting each model's non parametric test
GD = c(model_df$G.deviance) #Deviation
AIC = c(model_df$aic)# Overfitting
SBC = c(model_df$sbc)# Overfitting
paste0('The model Global Deviation - GD was: ', round(GD,2))
paste0('The model Akaike Information Criterion - AIC was: ', round(AIC,2))
paste0('The model Schwarz Bayesian Criterion - SBC was: ', round(SBC,2))
write.csv(test_df,"daily_oil_prediction.csv", row.names = FALSE)
# Verify if the package is already installed, if not, install package
if("ggplot2" %in% rownames(installed.packages()) == FALSE) {install.packages("ggplot2")}
if("ggpubr" %in% rownames(installed.packages()) == FALSE) {install.packages("ggpubr")}
if("tidyverse" %in% rownames(installed.packages()) == FALSE) {install.packages("tidyverse")}
if("tidyr" %in% rownames(installed.packages()) == FALSE) {install.packages("tidyr")}
if("gridExtra" %in% rownames(installed.packages()) == FALSE) {install.packages("gridExtra")}
if("gamlss" %in% rownames(installed.packages()) == FALSE) {install.packages("gamlss")}
if("gamlss.add" %in% rownames(installed.packages()) == FALSE) {install.packages("gamlss.add")}
if("gamlss.dist" %in% rownames(installed.packages()) == FALSE) {install.packages("gamlss.dist")}
if("corrplot" %in% rownames(installed.packages()) == FALSE) {install.packages("corrplot")}
if("gamlss.dist" %in% rownames(installed.packages()) == FALSE) {install.packages("gamlss.dist")}
if("Hmisc" %in% rownames(installed.packages()) == FALSE) {install.packages("Hmisc")}
if("forecast" %in% rownames(installed.packages()) == FALSE) {install.packages("forecast")}
# Loading libraries
library(gamlss)
library(ggpubr)
library(gamlss.add)
library(gamlss.dist)
library(ggplot2)
library(corrplot)
library(cowplot)
library(Hmisc)
library(gridExtra)
library(forecast)
# extrack the 'oil' data
data(oil)
# set random seed to create a reproducible script
set.seed(18)
head(as.matrix(oil), 3)
paste0("The \'oil\' data frame has ", nrow(oil), " observations and  ",
ncol(oil), " variables. ")
# columns names (oil)
oil_col_names <- colnames(oil)
cat('Variables in the \'oil\' data frame: \n\n')
for (i in (1:ncol(oil))) {print(paste0("Column number: ",i, ". Variable name: ",
oil_col_names[i]))}
is.null(oil)
sum(is.na(oil))
# Creating a new data frame called 'df' without the past contracts information.
# According to the number of columns and their names in 'oil_col_names', lets
# remove the columns 2 to 15 representing the 'CL#_log's variables
df = oil[,-2:-15]
head(df, 3)
ts(df$OILPRICE, frequency = 365) %>%
decompose() %>%
autoplot()
paste0("The 'df' data frame has ", nrow(df), " observations and  ", ncol(df),
" variables. ")
# columns names (df)
df_col_names <- colnames(df)
cat('Variables in the \'df\' data frame: \n\n')
for (i in (1:ncol(df))) {print(paste0("Column number: ",i, ". Variable name: ",
df_col_names[i]))}
# paste0("Variable name: ", col_names)
# Let us see some basic statistics of our new 'df' data frame
summary(df)
p1 <- ggplot(df, aes(SPX_log, OILPRICE)) + geom_point()
p2 <- ggplot(df, aes(DX1_log, OILPRICE)) +  geom_point()
p3 <- ggplot(df, aes(BDIY_log, OILPRICE)) +  geom_point()
p4 <- ggplot(df, aes(GC1_log, OILPRICE)) +  geom_point()
p5 <- ggplot(df, aes(HO1_log, OILPRICE)) +  geom_point()
p6 <- ggplot(df, aes(FTSE_log, OILPRICE)) +  geom_point()
p7 <- ggplot(df, aes(USCI_log, OILPRICE)) +  geom_point()
p8 <- ggplot(df, aes(GNR_log, OILPRICE)) +  geom_point()
p9 <- ggplot(df, aes(SHCOMP_log, OILPRICE)) +  geom_point()
plot_list = list(p1, p2, p3, p4, p5, p6, p7, p8, p9)
plot_grid(plotlist = plot_list,
labels = c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'),
label_x = 0.01,
label_y = 0.87,
hjust = -0.5,
vjust = -0.5,
label_fontfamily = "serif",
label_fontface = "plain",
label_colour = "blue")
# Making the objects in the 'df' data frame searchable
attach(df)
# Selecting plot's parameters
color1 <- 'black'
fill1 <- 'white'
alp <- .2
fill2 <- "#FF6666"
x_inter = mean(OILPRICE)
color2 <- 'blue'
lt <- 'dashed'
sz <- 1
# Plotting
par(mfrow=c(3,4))
h1 <- ggplot(df, aes(x=OILPRICE))+ ggtitle("Oil Price")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(OILPRICE)), color=color2, linetype=lt, size=sz)
h2 <- ggplot(df, aes(x=BDIY_log))+ ggtitle("Baltic Dry")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(BDIY_log)), color=color2, linetype=lt, size=sz)
h3 <- ggplot(df, aes(x=SPX_log))+ ggtitle("S&P 500 index")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(SPX_log)), color=color2, linetype=lt, size=sz)
h4 <- ggplot(df, aes(x=DX1_log))+ ggtitle("US Dollar Index")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(DX1_log)), color=color2, linetype=lt, size=sz)
h5 <- ggplot(df, aes(x=GC1_log))+ ggtitle("Gold price contract trades")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(GC1_log)), color=color2, linetype=lt, size=sz)
h6 <- ggplot(df, aes(x=HO1_log))+ ggtitle("Heating Oil price contract traded")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(HO1_log)), color=color2, linetype=lt, size=sz)
h7 <- ggplot(df, aes(x=USCI_log))+ ggtitle("US Commodity Index")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(USCI_log)), color=color2, linetype=lt, size=sz)
h8 <- ggplot(df, aes(x=GNR_log))+ ggtitle("S&P Global Natural Resources Index")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(GNR_log)), color=color2, linetype=lt, size=sz)
h9 <- ggplot(df, aes(x=SHCOMP_log))+
ggtitle("Shanghai Stock Exchange Composite Index")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(SHCOMP_log)), color=color2, linetype=lt,
size=sz)
h10 <- ggplot(df, aes(x=FTSE_log))+ ggtitle("FTSE 100 Index")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(FTSE_log)), color=color2, linetype=lt, size=sz)
h11 <- ggplot(df, aes(x=respLAG))+ ggtitle("OILPRICE - lagged version")+
geom_histogram(aes(y=..density..), colour=color1, fill=fill1)+
geom_density(alpha=alp, fill=fill2)+
geom_vline(aes(xintercept=mean(respLAG)), color=color2, linetype=lt, size=sz)
hist_list = list(h1, h2, h3, h4, h5, h6, h7, h8, h9, h10, h11)
plot_grid(plotlist = hist_list,
labels = c('A', 'B', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M'),
label_x = 0.01,
label_y = 0.87,
hjust = -0.5,
vjust = -0.5,
label_fontfamily = "serif",
label_fontface = "plain",
label_colour = "blue")
# Building a correlation Matrix
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# matrix of the p-value of the correlation
p.mat <- cor.mtest(df, method = 'spearman', exact=FALSE)
p.mat
corr_mat=cor(df,method="s")
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(corr_mat, method="color", col=col(200),
type="upper", order="hclust",
addCoef.col = "black",
tl.col="black", tl.srt=45,
# Combine with significance
p.mat = p.mat, sig.level = 0.001, insig = "pch",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
# showing available link functions for BCPE distribution parameters
show.link('BCPE')
histDist(df$OILPRICE,
family = BCPE,
density = TRUE,
main = 'The Oil Price and the fitted BCPE distribution',
ylab = 'Frequency',
xlab = 'Oil Price')
# Dividing the 'df' data frame into train and test
dt_df = sample(nrow(df), nrow(df)*.7, replace = FALSE)
train_df <- df[dt_df, ]
test_df <- df[-dt_df, ]
print('Data splitted: 70% train, 30% test')
## check if model exists? If not, refit:
if(file.exists("gamlss_oil_model.rda")) {
## load model
load("gamlss_oil_model.rda")
} else {
## (re)fit the model
model_df <- gamlss(formula = OILPRICE ~ ., family = BCPE, data = train_df,
control = gamlss.control(n.cyc = 350))
}
# save the model
save(model_df, file = "gamlss_oil_model.rda")
summary(model_df)
# Prediction
test_df$pred <- predict(model_df, newdata=test_df, type = "response")
# Deviation calculation
test_df$pred.deviation  <- round(test_df$pred/test_df$OILPRICE,10)
test_df$pred.deviation  <- test_df$pred.deviation-1
# Plotting prediction's deviation
par(mfrow=c(1,2))
hist(100*test_df$pred.deviation, main="Prediction +-2% deviation interval",
xlab = "Deviation percentage", labels = T,
xlim =c(-2,2),
ylim = c(0,150))
hist(100*test_df$pred.deviation, main="Prediction +-.5% deviation interval",
xlab = "Deviation percentage", labels = T,
xlim =c(-0.5,0.5),
ylim = c(0,150), breaks = 32)
test_dev <- 100*test_df$pred.deviation
test_1dev <- sum(abs(test_dev) <= 1)
test_05dev <- sum(abs(test_dev) <= 0.5)
test_size <- nrow(test_df)
test_in_1dev = (test_1dev / test_size)*100
test_in_05dev = (test_05dev / test_size)*100
paste0(round(test_in_1dev,2),
'% of the predicted values are in a +-1% deviation margin to the real values')
paste0(round(test_in_05dev,2),
'% of the predicted values are in a +-0.5% deviation margin to the real values')
plot(model_df)
# Plotting residuals
wp(model_df)
# Getting each model's non parametric test
GD = c(model_df$G.deviance) #Deviation
AIC = c(model_df$aic)# Overfitting
SBC = c(model_df$sbc)# Overfitting
paste0('The model Global Deviation - GD was: ', round(GD,2))
paste0('The model Akaike Information Criterion - AIC was: ', round(AIC,2))
paste0('The model Schwarz Bayesian Criterion - SBC was: ', round(SBC,2))
write.csv(test_df,"daily_oil_prediction.csv", row.names = FALSE)
